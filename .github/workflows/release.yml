name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lbxd
            asset_name: lbxd-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lbxd.exe
            asset_name: lbxd-windows-x86_64.exe.zip
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: lbxd
            asset_name: lbxd-macos-x86_64.tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: lbxd
            asset_name: lbxd-macos-aarch64.tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Visual Studio Build Tools (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        # Keep Python 3.12 explicit pin to prevent distutils/packaging issues
        # that arise with Python 3.13+ where distutils was removed from stdlib
        python-version: '3.12'

    - name: Verify Python installation
      run: |
        python --version
        python -m pip --version

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libgomp1

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Ensure Homebrew is available and up to date
        brew update || true
        # Install system libraries if needed (most are provided by macOS)
        echo "macOS system dependencies ready"

    - name: Install Python dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip
        # Install setuptools first to provide distutils functionality
        pip install setuptools
        # Install image processing dependencies required for ASCII art generation
        # Use headless OpenCV to avoid GUI dependencies
        pip install opencv-python-headless Pillow numpy
        pip install letterboxdpy

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        # Install setuptools first to provide distutils functionality
        pip install setuptools
        # Install image processing dependencies required for ASCII art generation
        # Use headless OpenCV to avoid GUI dependencies on Windows
        pip install opencv-python-headless Pillow numpy
        pip install letterboxdpy

    - name: Validate Python dependencies
      run: |
        python -c "import cv2; import PIL; import numpy; import letterboxdpy; print('All Python dependencies installed successfully')"

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    # Expanded cache key with runner.os, matrix.target, and matrix.os
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-${{ matrix.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Test ASCII art generation
      run: |
        echo "Testing Python ASCII art generation..."
        python -c "
        import tempfile
        import os
        from PIL import Image
        import numpy as np
        
        # Create a simple test image
        img = Image.new('RGB', (100, 100), color='red')
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
            img.save(tmp.name)
            print(f'Test image created: {tmp.name}')
            
            # Test if we can read it back
            test_img = Image.open(tmp.name)
            print(f'Test image size: {test_img.size}')
            
            # Properly close the image to release file handles (important on Windows)
            test_img.close()
            
            # Clean up with proper error handling for Windows
            try:
                os.unlink(tmp.name)
            except (OSError, PermissionError) as e:
                print(f'Warning: Could not delete temp file {tmp.name}: {e}')
                # On Windows, temp files are often cleaned up automatically
                pass
            
        print('ASCII art dependencies working correctly')
        "

    - name: Build release
      run: |
        echo "Building for target: ${{ matrix.target }}"
        echo "Runner OS: ${{ runner.os }}"
        cargo build --release --target ${{ matrix.target }} --verbose

    # Strip binary on Unix only if it exists; ignore already-stripped return codes
    - name: Strip binary (unix)
      if: runner.os != 'Windows'
      run: |
        BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.artifact_name }}"
        if [ -f "$BINARY_PATH" ]; then
          strip "$BINARY_PATH" || true
        else
          echo "Warning: Binary not found at $BINARY_PATH"
          ls -la target/${{ matrix.target }}/release/
        fi

    - name: Create archive (unix)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar czvf ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}

    - name: Create archive (windows)
      if: runner.os == 'Windows'
      run: |
        echo "Creating Windows archive for: ${{ matrix.artifact_name }}"
        cd target/${{ matrix.target }}/release
        dir
        # Use pre-installed 7z.exe on Windows (no Chocolatey step needed)
        7z a ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts/

    - name: Move artifacts to root
      run: |
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          mv "$file" ./
        done
        ls -la *.tar.gz *.zip

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          *.tar.gz
          *.zip
        generate_release_notes: true
        draft: false
        prerelease: false